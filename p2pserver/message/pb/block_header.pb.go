// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block_header.proto

package netpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Header struct {
	Version          uint32   `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	PrevBlockHash    []byte   `protobuf:"bytes,2,opt,name=PrevBlockHash,proto3" json:"PrevBlockHash,omitempty"`
	TransactionsRoot []byte   `protobuf:"bytes,3,opt,name=TransactionsRoot,proto3" json:"TransactionsRoot,omitempty"`
	BlockRoot        []byte   `protobuf:"bytes,4,opt,name=BlockRoot,proto3" json:"BlockRoot,omitempty"`
	Timestamp        uint32   `protobuf:"varint,5,opt,name=Timestamp" json:"Timestamp,omitempty"`
	Height           uint32   `protobuf:"varint,6,opt,name=Height" json:"Height,omitempty"`
	ConsensusData    uint64   `protobuf:"varint,7,opt,name=ConsensusData" json:"ConsensusData,omitempty"`
	ConsensusPayload []byte   `protobuf:"bytes,8,opt,name=ConsensusPayload,proto3" json:"ConsensusPayload,omitempty"`
	NextBookkeeper   []byte   `protobuf:"bytes,9,opt,name=NextBookkeeper,proto3" json:"NextBookkeeper,omitempty"`
	Bookkeepers      [][]byte `protobuf:"bytes,10,rep,name=Bookkeepers,proto3" json:"Bookkeepers,omitempty"`
	SigData          [][]byte `protobuf:"bytes,11,rep,name=SigData,proto3" json:"SigData,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

func (m *Header) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Header) GetPrevBlockHash() []byte {
	if m != nil {
		return m.PrevBlockHash
	}
	return nil
}

func (m *Header) GetTransactionsRoot() []byte {
	if m != nil {
		return m.TransactionsRoot
	}
	return nil
}

func (m *Header) GetBlockRoot() []byte {
	if m != nil {
		return m.BlockRoot
	}
	return nil
}

func (m *Header) GetTimestamp() uint32 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Header) GetHeight() uint32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Header) GetConsensusData() uint64 {
	if m != nil {
		return m.ConsensusData
	}
	return 0
}

func (m *Header) GetConsensusPayload() []byte {
	if m != nil {
		return m.ConsensusPayload
	}
	return nil
}

func (m *Header) GetNextBookkeeper() []byte {
	if m != nil {
		return m.NextBookkeeper
	}
	return nil
}

func (m *Header) GetBookkeepers() [][]byte {
	if m != nil {
		return m.Bookkeepers
	}
	return nil
}

func (m *Header) GetSigData() [][]byte {
	if m != nil {
		return m.SigData
	}
	return nil
}

type BlkHeader struct {
	BlkHdr []*Header `protobuf:"bytes,1,rep,name=BlkHdr" json:"BlkHdr,omitempty"`
}

func (m *BlkHeader) Reset()                    { *m = BlkHeader{} }
func (m *BlkHeader) String() string            { return proto.CompactTextString(m) }
func (*BlkHeader) ProtoMessage()               {}
func (*BlkHeader) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

func (m *BlkHeader) GetBlkHdr() []*Header {
	if m != nil {
		return m.BlkHdr
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "netpb.Header")
	proto.RegisterType((*BlkHeader)(nil), "netpb.BlkHeader")
}

func init() { proto.RegisterFile("block_header.proto", fileDescriptor19) }

var fileDescriptor19 = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xbf, 0x4e, 0xf3, 0x30,
	0x14, 0xc5, 0x95, 0xfe, 0x49, 0xbf, 0xba, 0xcd, 0x27, 0xe4, 0x01, 0x79, 0x60, 0xb0, 0x2a, 0x40,
	0x11, 0x43, 0x86, 0xf2, 0x06, 0x85, 0xa1, 0x13, 0xaa, 0x4c, 0xc5, 0x8a, 0x9c, 0xe6, 0xaa, 0x89,
	0xd2, 0xfa, 0x46, 0xb6, 0x41, 0xf0, 0xf2, 0x08, 0xf9, 0x36, 0x25, 0xb4, 0x8c, 0xe7, 0x77, 0x8e,
	0xad, 0xa3, 0x7b, 0x18, 0xcf, 0x77, 0xb8, 0xa9, 0x5f, 0x4b, 0xd0, 0x05, 0xd8, 0xac, 0xb1, 0xe8,
	0x91, 0x0f, 0x0d, 0xf8, 0x26, 0x9f, 0x7d, 0xf5, 0x58, 0xbc, 0x24, 0xce, 0x05, 0x1b, 0xbd, 0x80,
	0x75, 0x15, 0x1a, 0x11, 0xc9, 0x28, 0x4d, 0xd4, 0x51, 0xf2, 0x6b, 0x96, 0xac, 0x2c, 0xbc, 0x2f,
	0xc2, 0x2f, 0x4b, 0xed, 0x4a, 0xd1, 0x93, 0x51, 0x3a, 0x55, 0xa7, 0x90, 0xdf, 0xb1, 0x8b, 0xb5,
	0xd5, 0xc6, 0xe9, 0x8d, 0xaf, 0xd0, 0x38, 0x85, 0xe8, 0x45, 0x9f, 0x82, 0x7f, 0x38, 0xbf, 0x62,
	0x63, 0x7a, 0x48, 0xa1, 0x01, 0x85, 0x3a, 0x10, 0xdc, 0x75, 0xb5, 0x07, 0xe7, 0xf5, 0xbe, 0x11,
	0x43, 0xea, 0xd2, 0x01, 0x7e, 0x19, 0x1a, 0x57, 0xdb, 0xd2, 0x8b, 0x98, 0xac, 0x56, 0x85, 0x96,
	0x0f, 0x68, 0x1c, 0x18, 0xf7, 0xe6, 0x1e, 0xb5, 0xd7, 0x62, 0x24, 0xa3, 0x74, 0xa0, 0x4e, 0x61,
	0x68, 0xf9, 0x03, 0x56, 0xfa, 0x73, 0x87, 0xba, 0x10, 0xff, 0x0e, 0x2d, 0xcf, 0x39, 0xbf, 0x65,
	0xff, 0x9f, 0xe0, 0xc3, 0x2f, 0x10, 0xeb, 0x1a, 0xa0, 0x01, 0x2b, 0xc6, 0x94, 0x3c, 0xa3, 0x5c,
	0xb2, 0x49, 0xa7, 0x9c, 0x60, 0xb2, 0x9f, 0x4e, 0xd5, 0x6f, 0x14, 0x6e, 0xfb, 0x5c, 0x6d, 0xa9,
	0xd5, 0x84, 0xdc, 0xa3, 0x9c, 0xcd, 0xc3, 0x25, 0xea, 0x76, 0x82, 0x1b, 0x16, 0x07, 0x51, 0x58,
	0x11, 0xc9, 0x7e, 0x3a, 0x99, 0x27, 0x19, 0xad, 0x94, 0x1d, 0x6c, 0xd5, 0x9a, 0x79, 0x4c, 0x13,
	0xde, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xa6, 0x01, 0x1b, 0xd8, 0x01, 0x00, 0x00,
}
