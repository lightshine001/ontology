// Code generated by protoc-gen-go. DO NOT EDIT.
// source: block_headers_req.proto

package netpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type HeadersReq struct {
	Len       uint32 `protobuf:"varint,1,opt,name=Len" json:"Len,omitempty"`
	HashStart []byte `protobuf:"bytes,2,opt,name=HashStart,proto3" json:"HashStart,omitempty"`
	HashEnd   []byte `protobuf:"bytes,3,opt,name=HashEnd,proto3" json:"HashEnd,omitempty"`
}

func (m *HeadersReq) Reset()                    { *m = HeadersReq{} }
func (m *HeadersReq) String() string            { return proto.CompactTextString(m) }
func (*HeadersReq) ProtoMessage()               {}
func (*HeadersReq) Descriptor() ([]byte, []int) { return fileDescriptor3, []int{0} }

func (m *HeadersReq) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

func (m *HeadersReq) GetHashStart() []byte {
	if m != nil {
		return m.HashStart
	}
	return nil
}

func (m *HeadersReq) GetHashEnd() []byte {
	if m != nil {
		return m.HashEnd
	}
	return nil
}

func init() {
	proto.RegisterType((*HeadersReq)(nil), "netpb.HeadersReq")
}

func init() { proto.RegisterFile("block_headers_req.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0xca, 0xc9, 0x4f,
	0xce, 0x8e, 0xcf, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0x2a, 0x8e, 0x2f, 0x4a, 0x2d, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x4b, 0x2d, 0x29, 0x48, 0x52, 0x0a, 0xe3, 0xe2, 0xf2, 0x80,
	0xc8, 0x05, 0xa5, 0x16, 0x0a, 0x09, 0x70, 0x31, 0xfb, 0xa4, 0xe6, 0x49, 0x30, 0x2a, 0x30, 0x6a,
	0xf0, 0x06, 0x81, 0x98, 0x42, 0x32, 0x5c, 0x9c, 0x1e, 0x89, 0xc5, 0x19, 0xc1, 0x25, 0x89, 0x45,
	0x25, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x08, 0x01, 0x21, 0x09, 0x2e, 0x76, 0x10, 0xc7,
	0x35, 0x2f, 0x45, 0x82, 0x19, 0x2c, 0x07, 0xe3, 0x26, 0xb1, 0x81, 0x6d, 0x31, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0xd6, 0x3d, 0x91, 0x73, 0x80, 0x00, 0x00, 0x00,
}
