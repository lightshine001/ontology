// Code generated by protoc-gen-go. DO NOT EDIT.
// source: inventory.proto

package netpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type InvPayload struct {
	InvType InventoryType `protobuf:"varint,1,opt,name=InvType,enum=netpb.InventoryType" json:"InvType,omitempty"`
	Blk     [][]byte      `protobuf:"bytes,2,rep,name=Blk,proto3" json:"Blk,omitempty"`
}

func (m *InvPayload) Reset()                    { *m = InvPayload{} }
func (m *InvPayload) String() string            { return proto.CompactTextString(m) }
func (*InvPayload) ProtoMessage()               {}
func (*InvPayload) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{0} }

func (m *InvPayload) GetInvType() InventoryType {
	if m != nil {
		return m.InvType
	}
	return InventoryType_DEFAULT
}

func (m *InvPayload) GetBlk() [][]byte {
	if m != nil {
		return m.Blk
	}
	return nil
}

type Inv struct {
	P   *InvPayload `protobuf:"bytes,1,opt,name=P" json:"P,omitempty"`
	Hop uint32      `protobuf:"varint,2,opt,name=Hop" json:"Hop,omitempty"`
}

func (m *Inv) Reset()                    { *m = Inv{} }
func (m *Inv) String() string            { return proto.CompactTextString(m) }
func (*Inv) ProtoMessage()               {}
func (*Inv) Descriptor() ([]byte, []int) { return fileDescriptor11, []int{1} }

func (m *Inv) GetP() *InvPayload {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *Inv) GetHop() uint32 {
	if m != nil {
		return m.Hop
	}
	return 0
}

func init() {
	proto.RegisterType((*InvPayload)(nil), "netpb.InvPayload")
	proto.RegisterType((*Inv)(nil), "netpb.Inv")
}

func init() { proto.RegisterFile("inventory.proto", fileDescriptor11) }

var fileDescriptor11 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0xcc, 0x2b, 0x4b,
	0xcd, 0x2b, 0xc9, 0x2f, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x4b, 0x2d,
	0x29, 0x48, 0x92, 0xe2, 0x4b, 0x49, 0x2c, 0x49, 0x8c, 0x2f, 0x4a, 0x2d, 0x84, 0x08, 0x2b, 0xf9,
	0x71, 0x71, 0x79, 0xe6, 0x95, 0x05, 0x24, 0x56, 0xe6, 0xe4, 0x27, 0xa6, 0x08, 0xe9, 0x71, 0xb1,
	0x7b, 0xe6, 0x95, 0x85, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x19, 0x89, 0xe8,
	0x81, 0xb5, 0xe9, 0x79, 0xc2, 0x4c, 0x03, 0xc9, 0x05, 0xc1, 0x14, 0x09, 0x09, 0x70, 0x31, 0x3b,
	0xe5, 0x64, 0x4b, 0x30, 0x29, 0x30, 0x6b, 0xf0, 0x04, 0x81, 0x98, 0x4a, 0x16, 0x5c, 0xcc, 0x9e,
	0x79, 0x65, 0x42, 0xf2, 0x5c, 0x8c, 0x01, 0x60, 0x23, 0xb8, 0x8d, 0x04, 0x11, 0x46, 0x40, 0xad,
	0x09, 0x62, 0x0c, 0x00, 0xe9, 0xf4, 0xc8, 0x2f, 0x90, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0d, 0x02,
	0x31, 0x93, 0xd8, 0xc0, 0x0e, 0x32, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x99, 0xdb, 0x8a,
	0xba, 0x00, 0x00, 0x00,
}
