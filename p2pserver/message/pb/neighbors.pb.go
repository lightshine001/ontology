// Code generated by protoc-gen-go. DO NOT EDIT.
// source: neighbors.proto

package netpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Node struct {
	ID      []byte `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IP      string `protobuf:"bytes,2,opt,name=IP" json:"IP,omitempty"`
	UDPPort uint32 `protobuf:"varint,3,opt,name=UDPPort" json:"UDPPort,omitempty"`
	TCPPort uint32 `protobuf:"varint,4,opt,name=TCPPort" json:"TCPPort,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{0} }

func (m *Node) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Node) GetIP() string {
	if m != nil {
		return m.IP
	}
	return ""
}

func (m *Node) GetUDPPort() uint32 {
	if m != nil {
		return m.UDPPort
	}
	return 0
}

func (m *Node) GetTCPPort() uint32 {
	if m != nil {
		return m.TCPPort
	}
	return 0
}

type Neighbors struct {
	FromID []byte  `protobuf:"bytes,1,opt,name=FromID,proto3" json:"FromID,omitempty"`
	Nodes  []*Node `protobuf:"bytes,2,rep,name=Nodes" json:"Nodes,omitempty"`
}

func (m *Neighbors) Reset()                    { *m = Neighbors{} }
func (m *Neighbors) String() string            { return proto.CompactTextString(m) }
func (*Neighbors) ProtoMessage()               {}
func (*Neighbors) Descriptor() ([]byte, []int) { return fileDescriptor12, []int{1} }

func (m *Neighbors) GetFromID() []byte {
	if m != nil {
		return m.FromID
	}
	return nil
}

func (m *Neighbors) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "netpb.Node")
	proto.RegisterType((*Neighbors)(nil), "netpb.Neighbors")
}

func init() { proto.RegisterFile("neighbors.proto", fileDescriptor12) }

var fileDescriptor12 = []byte{
	// 163 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcf, 0x4b, 0xcd, 0x4c,
	0xcf, 0x48, 0xca, 0x2f, 0x2a, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x4b, 0x2d,
	0x29, 0x48, 0x52, 0x8a, 0xe2, 0x62, 0xf1, 0xcb, 0x4f, 0x49, 0x15, 0xe2, 0xe3, 0x62, 0xf2, 0x74,
	0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x09, 0x62, 0xf2, 0x74, 0x01, 0xf3, 0x03, 0x24, 0x98, 0x14,
	0x18, 0x35, 0x38, 0x83, 0x98, 0x3c, 0x03, 0x84, 0x24, 0xb8, 0xd8, 0x43, 0x5d, 0x02, 0x02, 0xf2,
	0x8b, 0x4a, 0x24, 0x98, 0x15, 0x18, 0x35, 0x78, 0x83, 0x60, 0x5c, 0x90, 0x4c, 0x88, 0x33, 0x44,
	0x86, 0x05, 0x22, 0x03, 0xe5, 0x2a, 0xb9, 0x71, 0x71, 0xfa, 0xc1, 0x6c, 0x15, 0x12, 0xe3, 0x62,
	0x73, 0x2b, 0xca, 0xcf, 0x85, 0x5b, 0x02, 0xe5, 0x09, 0x29, 0x72, 0xb1, 0x82, 0x1c, 0x50, 0x2c,
	0xc1, 0xa4, 0xc0, 0xac, 0xc1, 0x6d, 0xc4, 0xad, 0x07, 0x76, 0x97, 0x1e, 0x48, 0x2c, 0x08, 0x22,
	0x93, 0xc4, 0x06, 0x76, 0xb1, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x4b, 0xf2, 0xe1, 0xc4,
	0x00, 0x00, 0x00,
}
