// Code generated by protoc-gen-go. DO NOT EDIT.
// source: verack.proto

package netpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type VerAck struct {
	IsConsensus          bool     `protobuf:"varint,1,opt,name=IsConsensus,proto3" json:"IsConsensus,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VerAck) Reset()         { *m = VerAck{} }
func (m *VerAck) String() string { return proto.CompactTextString(m) }
func (*VerAck) ProtoMessage()    {}
func (*VerAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_verack_e58ba7336bb15fce, []int{0}
}
func (m *VerAck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VerAck.Unmarshal(m, b)
}
func (m *VerAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VerAck.Marshal(b, m, deterministic)
}
func (dst *VerAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerAck.Merge(dst, src)
}
func (m *VerAck) XXX_Size() int {
	return xxx_messageInfo_VerAck.Size(m)
}
func (m *VerAck) XXX_DiscardUnknown() {
	xxx_messageInfo_VerAck.DiscardUnknown(m)
}

var xxx_messageInfo_VerAck proto.InternalMessageInfo

func (m *VerAck) GetIsConsensus() bool {
	if m != nil {
		return m.IsConsensus
	}
	return false
}

func init() {
	proto.RegisterType((*VerAck)(nil), "netpb.VerAck")
}

func init() { proto.RegisterFile("verack.proto", fileDescriptor_verack_e58ba7336bb15fce) }

var fileDescriptor_verack_e58ba7336bb15fce = []byte{
	// 84 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4b, 0x2d, 0x4a,
	0x4c, 0xce, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x4b, 0x2d, 0x29, 0x48, 0x52,
	0xd2, 0xe2, 0x62, 0x0b, 0x4b, 0x2d, 0x72, 0x4c, 0xce, 0x16, 0x52, 0xe0, 0xe2, 0xf6, 0x2c, 0x76,
	0xce, 0xcf, 0x2b, 0x4e, 0xcd, 0x2b, 0x2e, 0x2d, 0x96, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x08, 0x42,
	0x16, 0x4a, 0x62, 0x03, 0xeb, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08, 0xb9, 0x06, 0x0a,
	0x49, 0x00, 0x00, 0x00,
}
